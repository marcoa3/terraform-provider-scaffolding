# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
# Added additional job publish-to-private-registry.
name: release
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3.0.0
        with:
          version: latest
          args: release
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: files
          path: dist/*
  publish-to-private-registry:
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download assets
        uses: actions/download-artifact@master
        with:
          name: files
          path: path/to/artifact
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: path/to/artifact
      - name: Set release version in env
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo "RELEASE_VERSION=${RELEASE_VERSION:1}" >> $GITHUB_ENV
      - name: Test release version environment variable
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: List files & dist
        run: |
          echo "list files $(ls -al path/to/artifact)"
      # - name: Create provider version and store output
      #   run: |
      #     curl -X POST https://app.terraform.io/api/v2/organizations/beautypie/registry-providers/private/beautypie/scaffolding/versions -o links.json -H "Content-Type: application/vnd.api+json" -H "Accept: application/vnd.api+json" -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" --data-binary @- <<DATA
      #     {
      #       "data": {
      #         "type": "registry-provider-versions",
      #         "attributes": {
      #           "version": "${{ env.RELEASE_VERSION }}",
      #           "key-id": "marcus.ojerinde-ardalla@beautypie.com",
      #           "protocols": ["5.0"]
      #         }
      #       }
      #     }
      #     DATA
      # - name: Parse shasum links as env variables
      #   run: |
      #     echo "SHASUM_UPLOAD=$(jq '.data.links."shasums-upload"' links.json)" >> $GITHUB_ENV
      #     echo "SHASUMS_SIG_UPLOAD=$(jq '.data.links."shasums-sig-upload"' links.json)" >> $GITHUB_ENV
      # - name: Test SHASUM links environment variable
      #   run: |
      #     echo $SHASUM_UPLOAD
      #     echo ${{ env.SHASUM_UPLOAD }}
      #     echo $SHASUMS_SIG_UPLOAD
      #     echo ${{ env.SHASUMS_SIG_UPLOAD }}
      # - name: Upload SHA256SUMS & SIG to registry
      #   run: |
      #     curl -T dist/terraform-provider-scaffolding_${{ env.RELEASE_VERSION }}_SHA256SUMS ${{ env.SHASUM_UPLOAD }}
      #     curl -T dist/terraform-provider-scaffolding_${{ env.RELEASE_VERSION }}_SHA256SUMS.sigs ${{ env.SHASUMS_SIG_UPLOAD }}
      # - name: Create release SHASUM
      #   run: |
      #     echo CHECKSUM="$(shasum dist/terraform-provider-scaffolding_${{ env.RELEASE_VERSION }}_linux_amd64.zip.zip | awk '{ print $1 }')" >> "$GITHUB_ENV"
      # - name: Test SHASUM from file environment variable
      #   run: |
      #     echo $CHECKSUM
      #     echo ${{ env.CHECKSUM }}
      # - name: Create provider platform and store output
      #   run: |
      #     curl -X POST https://app.terraform.io/api/v2/organizations/beautypie/registry-providers/private/beautypie/scaffolding/versions/${{ env.RELEASE_VERSION }}/platforms -H "Content-Type: application/vnd.api+json" -H "Accept: application/vnd.api+json" -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" --data-binary @- <<DATA
      #     {
      #       "data":{
      #           "type":"registry-provider-version-platforms",
      #           "attributes":{
      #             "os":"linux",
      #             "arch":"amd64",
      #             "shasum":"${{ env.CHECKSUM }}",
      #             "filename":"dist/terraform-provider-scaffolding_${{ env.RELEASE_VERSION }}_linux_amd64.zip"
      #           }
      #       }
      #     } 
      #     DATA > provider-platform.json
      # - name: Parse provider-binary-upload link as env variables
      #   run: |
      #     echo "BINARY_UPLOAD=$(jq '.data.links."provider-binary-upload"' provider-platform.json)" >> $GITHUB_ENV
      # - name: Test BINARY_UPLOAD from file environment variable
      #   run: |
      #     echo $BINARY_UPLOAD
      #     echo ${{ env.BINARY_UPLOAD }}
      # - name: Upload platform binary to registry
      #   run: |
      #     curl -T dist/terraform-provider-scaffolding_${{ env.RELEASE_VERSION }}_linux_amd64.zip ${{ env.BINARY_UPLOAD }}

