# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
# Added additional job publish-to-private-registry.
name: release
on:
  push:
    branches:
      - '**'
env:
  PROVIDER_NAME: scaffolding
  ORGANISATION_NAME: beautypie
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          tag_prefix: v
          
      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3.0.0
        with:
          version: latest
          args: release
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: files
          path: dist/*
  prepare-private-registry:
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download assets
        uses: actions/download-artifact@master
        with:
          name: files
          path: release-files
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release-files
      - name: Get latest release of Repository
        uses: rez0n/actions-github-release@main
        id: latest-release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: "marcoa3/terraform-provider-scaffolding"
          type: "stable"
      - name: Set release version in env
        run: |
          RELEASE_VERSION=${{ steps.latest-release.outputs.release }}
          echo "RELEASE_VERSION=${RELEASE_VERSION:1}" >> $GITHUB_ENV
      - name: Test release version environment variable
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: Create provider version and store output
        run: |
          curl -X POST https://app.terraform.io/api/v2/organizations/$ORGANISATION_NAME/registry-providers/private/$ORGANISATION_NAME/$PROVIDER_NAME/versions -o shasum-links.json -H "Content-Type: application/vnd.api+json" -H "Accept: application/vnd.api+json" -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" --data-binary @- <<DATA
          {
            "data": {
              "type": "registry-provider-versions",
              "attributes": {
                "version": "${{ env.RELEASE_VERSION }}",
                "key-id": "AC296C6E21CA8F32",
                "protocols": ["5.0"]
              }
            }
          }
          DATA
      - name: Parse shasum links as env variables
        run: |
          echo "SHASUM_UPLOAD=$(jq '.data.links."shasums-upload"' shasum-links.json)" >> $GITHUB_ENV
          echo "SHASUMS_SIG_UPLOAD=$(jq '.data.links."shasums-sig-upload"' shasum-links.json)" >> $GITHUB_ENV
      - name: Test SHASUM UPLOAD links environment variable
        run: |
          echo "SHASUM_UPLOAD: $SHASUM_UPLOAD"
          echo "SHASUMS_SIG_UPLOAD: $SHASUMS_SIG_UPLOAD"
      - name: Upload SHA256SUMS & SIG to registry
        run: |
          curl -T release-files/terraform-provider-${{ env.PROVIDER_NAME }}_${{ env.RELEASE_VERSION }}_SHA256SUMS ${{ env.SHASUM_UPLOAD }}
          curl -T release-files/terraform-provider-${{ env.PROVIDER_NAME }}_${{ env.RELEASE_VERSION }}_SHA256SUMS.sig ${{ env.SHASUMS_SIG_UPLOAD }}
  publish-to-private-registry:
    needs: prepare-private-registry
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform_os_name: [linux,windows,freebsd,darwin]
        platform_arch_name: [arm,arm64,amd64,"386"]
        # darwin-arm/386 aren't valid or created platform architecture builds so they're excluded
        exclude:
          - platform_os_name: darwin
            platform_arch_name: arm
          - platform_os_name: darwin
            platform_arch_name: "386"
    env:
      platform_os: ${{ matrix.platform_os_name }}
      platform_arch: ${{ matrix.platform_arch_name }}
    steps:
      - name: Download assets
        uses: actions/download-artifact@master
        with:
          name: files
          path: release-files
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release-files
      - name: Get latest release of Repository
        uses: rez0n/actions-github-release@main
        id: latest-release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: "marcoa3/terraform-provider-scaffolding"
          type: "stable"
      - name: Set release version in env
        run: |
          RELEASE_VERSION=${{ steps.latest-release.outputs.release }}
          echo "RELEASE_VERSION=${RELEASE_VERSION:1}" >> $GITHUB_ENV
      - name: Create release SHASUM (linux,windows,freebsd)
        run: |
          echo CHECKSUM="$(shasum release-files/terraform-provider-${{ env.PROVIDER_NAME }}_${{ env.RELEASE_VERSION }}_${{ matrix.platform_os_name }}_${{ matrix.platform_arch_name }}.zip | awk '{ print $1 }')" >> "$GITHUB_ENV"
          echo "CHECKSUM for ${platform_os}-${platform_arch} is ${{ env.CHECKSUM }}"
      - name: Create provider platform and store output
        run: |
          curl -X POST https://app.terraform.io/api/v2/organizations/$ORGANISATION_NAME/registry-providers/private/$ORGANISATION_NAME/$PROVIDER_NAME/versions/${{ env.RELEASE_VERSION }}/platforms -o ${{ matrix.platform_os_name }}-${{ matrix.platform_arch_name }}.json -H "Content-Type: application/vnd.api+json" -H "Accept: application/vnd.api+json" -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" --data-binary @- <<DATA
          {
            "data":{
                "type":"registry-provider-version-platforms",
                "attributes":{
                  "os":"${{ matrix.platform_os_name }}",
                  "arch":"${{ matrix.platform_arch_name }}",
                  "shasum":"${{ env.CHECKSUM }}",
                  "filename":"terraform-provider-${{ env.PROVIDER_NAME }}_${{ env.RELEASE_VERSION }}_${{ matrix.platform_os_name }}_${{ matrix.platform_arch_name }}.zip"
                }
            }
          }
      - name: Parse provider-binary-upload link as env variable
        run: |
          echo "BINARY_UPLOAD=$(jq '.data.links."provider-binary-upload"' ${{ matrix.platform_os_name }}-${{ matrix.platform_arch_name }}.json)" >> $GITHUB_ENV
          echo "BINARY_UPLOAD for ${platform_os}-${platform_arch} is ${{ env.BINARY_UPLOAD }}"
      - name: Upload platform binary to registry
        run: |
          curl -T release-files/terraform-provider-${{ env.PROVIDER_NAME }}_${{ env.RELEASE_VERSION }}_${{ matrix.platform_os_name }}_${{ matrix.platform_arch_name }}.zip ${{ env.BINARY_UPLOAD }}
  cleanup:
    needs: publish-to-private-registry
    runs-on: ubuntu-latest
    steps:
     # delete-artifact
      - name: Remove downloaded assets
        uses: geekyeggo/delete-artifact@v1
        with:
          name: files
